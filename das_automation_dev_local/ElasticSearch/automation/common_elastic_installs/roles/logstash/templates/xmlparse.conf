input {
  file {
    path => "{{ path_fastxml }}"
    mode => "read"
    discover_interval => 1
    file_completed_action => "log"
    file_completed_log_path => "{{ path_input_log }}"
    file_sort_by => "path"
    tags => [ "fastxml", "xml" ]
  }

  file {
    path => "{{ path_fixml }}"
    mode => "read"
    discover_interval => 1
    file_completed_action => "log"
    file_completed_log_path => "{{ path_input_log }}"
    file_sort_by => "path"
    tags => [ "fixmlgz", "xml" ]
  }

  http {
    port => 5045
    tags => [ "fastxml", "xml" ]
  }
}

# Common to all index types
filter {
  if "fastxml" in [tags] {
    xml {
      source => "message"
      target => "Events"
    }

    split {
      field => "[Events][Event]"
    }
  }

  if "fixml" in [tags] or "fixmlgz" in [tags] {
    # Pull out bsumxmldata nodes
    xml {
      source => "message"
      target => "FIXML"
      store_xml => false
      xpath => [
        "//sField[@name='bsumxmldata']", "xmldata"
      ]
    }

    # Split events
    split {
      field => "xmldata"
    }

    # Extract CDATA content
    mutate {
      gsub => [
        "xmldata", "<sField name=\"bsumxmldata\"><\!\[CDATA\[", "",
        "xmldata", "]]></sField>", ""
      ]
    }

    # Parse resulting XML
    xml {
      source => "xmldata"
      target => "[Events][Event]"
    }
  }

  if "xml" in [tags] {
    # Send the split events to event.rb filter
    ruby {
      path => "/etc/logstash/filters/event.rb"
    }

    date {
      match => [ "[EventDate]",
        "yyyy-MM-dd'T'HH:mm:ss",
        "yyyy-MM-dd'T'HH:mm:ss'.'SSS" ]
      timezone => "America/New_York"
      target => "@timestamp"
    }

    # Cleanup
    mutate {
      convert => { "[FactEventId]" => "integer" }
      remove_field => [ "headers", "host", "message", "xmldata" ]
    }
  }
}

# Output
output {
  if "xml" in [tags] {
    if [Source] and [Source][SourceNameWebSafe] {
      elasticsearch {
        hosts => {{ output_es_hosts | to_yaml }}
        index => "das-%{[Source][SourceNameWebSafe]}-%{+YYYY.MM.dd}"
        document_id => "%{[FactEventId]}"
        cacert => "{{ output_es_ssl_ca }}"
        user => "{{ es_username }}"
        password => "{{ es_password }}"
      }
    } else {
      elasticsearch {
        hosts => {{ output_es_hosts | to_yaml }}
        index => "das-nosource-%{+YYYY.MM.dd}"
        document_id => "%{[FactEventId]}"
        cacert => "{{ output_es_ssl_ca }}"
        user => "{{ es_username }}"
        password => "{{ es_password }}"
      }
    }
  }
  if "log" in [tags] {
    elasticsearch {
      hosts => {{ output_es_hosts | to_yaml }}
      index => "logs-%{+YYYY.MM.dd}"
      cacert => "{{ output_es_ssl_ca }}"
      user => "{{ es_username }}"
      password => "{{ es_password }}"
    }
  }
}
